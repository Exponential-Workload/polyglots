{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my collection of Polyglots!","text":""},{"location":"#new-to-polyglots","title":"New to Polyglots?","text":"<p>Read this.</p>"},{"location":"#notice","title":"Notice","text":"<p>When I'm refrencing polyglots, I'm refrencing this.</p>"},{"location":"about-polyglots/","title":"What is a Polyglot?","text":"<p>tl;dr: Code that runs in multiple languages.</p>"},{"location":"about-polyglots/esoteric/","title":"Is this esoteric?","text":""},{"location":"about-polyglots/esoteric/#is-this-completely-esoteric","title":"Is this completely esoteric?","text":"<p>Not completely; however there are only a few normal use-cases for polyglots outside of the esoteric realm.</p> <p>One such example is, say you want to load some code from a memorable URL (example: <code>loadstring(game:HttpGetAsync'https://astolfoaim.femboy.cafe')()</code>) yet also want that url to load in a browser (example: https://astolfoaim.femboy.cafe), and don't want to do anything like user-agent checks which may break or be inconsistent. In that case, you might decide to use a Lua-HTML Polyglot.</p> <p>Another use-case would be, say you have a client API at https://example.com/api &amp; want multiple clients to be able to load it from that URL (say <code>&lt;script src=\"https://example.com/api\" /&gt;</code> and <code>loadstring(game:HttpGetAsync('https://example.com/api'))()</code>), you could use a Lua-JS Polyglot. Now say you want browsers visiting this URL to redirect to your documentation (or for that url to be your documentation): In that case, you may decide to use a Lua-JS-HTML Polyglot.</p>"},{"location":"about-polyglots/esoteric/#is-this-mostly-esoteric","title":"Is this mostly esoteric?","text":"<p>Yes. There are very few practical use-cases for Polyglots.</p>"},{"location":"polyglots/html/","title":"HTML-Anything Polyglots","text":"<p>It's fairly easy to make anything into an HTML Polyglot as anything is valid HTML.</p> <p>Simply insert your HTML into a comment in any language, and most modern browsers will be able to parse it. To cover up any visible code, with css, set a container's height &amp; width to cover the whole screen, position to a fixed position at the top-left corner, then set it's background to a solid colouor.</p> JS-HTML Example JS <pre><code>console.log('Hello, World!');\n</code></pre> <p>Turns into</p> JSHTML <pre><code>console.log('Hello, World!'); //&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <pre><code>console.log('Hello, World!'); //&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <p>or</p> JSHTML <pre><code>/*&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;*/console.log('Hello, World!');\n</code></pre> <pre><code>/*&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;*/console.log('Hello, World!');\n</code></pre> Lua-JS-HTML Example LuaJS <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> <p>Turns into</p> LuaJSHTML <pre><code>_=[[/*]]--[=[&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]=]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> <pre><code>_=[[/*]]--[=[&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]=]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> <pre><code>_=[[/*]]--[=[&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]=]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> <p>or</p> LuaJSHTML <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);//&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);//&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);//&lt;html&gt;&lt;head&gt;&lt;style&gt;.contentcontainer{position:fixed;top:0;left:0;width:100vw;height:100vh;background:inherit;color:inherit;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"contentcontainer\"&gt;html here&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> Attribution <p>This example turns this Lua-JS Polyglot, which is based on this Luau-JS Polyglot by @jack5079, into a Lua-HTML-JS Polyglot.</p>"},{"location":"polyglots/lua-js/","title":"Lua-JS Polyglots","text":"<p>Here's a collection of several Lua-JS Polyglots.</p>"},{"location":"polyglots/lua-js/#function-based-vanilla-lua-51js","title":"function-Based Vanilla Lua 5.1/JS","text":"LuaJS <pre><code>return ([[(()=&gt;{/*js here*/})()/*]] and (function()--[[lua here]];end)())--*/]])[0][0]\n</code></pre> <pre><code>return ([[(()=&gt;{/*js here*/})()/*]] and (function()--[[lua here]];end)())--*/]])[0][0]\n</code></pre> Attribution <p>This polyglot was created by @Exponential-Workload</p>"},{"location":"polyglots/lua-js/#variable-based-vanilla-lua-51js","title":"Variable-Based Vanilla Lua 5.1/JS","text":"LuaJS <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> <pre><code>_=[[/*]]print('lua here');return;--*/]]; console.log(`js here`);\n</code></pre> Warning <p>This polutes the global environment in JS. You can fix this by including <code>delete globalThis._</code> in your JS code. Note that doing that will remove any other globals named <code>_</code> - This can be hotfixed by replacing <code>_</code> with a more \"rare\" name (say <code>_polyglot_js_lua_global_ok</code>)</p> Attribution <p>This polyglot is based on the typeof-Based Luau/JS Polyglot by @jack5079</p>"},{"location":"polyglots/lua-js/#typeof-based-luaujs","title":"typeof-Based Luau/JS","text":"LuaJS <pre><code>typeof[[/*]]print'lua here'--*/]];console.log('js here')\n</code></pre> <pre><code>typeof[[/*]]print'lua here'--*/]];console.log('js here')\n</code></pre> Warning <p>This only works in lua envs with <code>typeof</code>, such as Luau.</p> Attribution <p>This polyglot was created by @jack5079</p>"}]}